************************ PREPROCESSING (IRDIS) ******************************

This file describes the structure of the preprocessing pipeline for IRDIS, and describes the parameters that can be set in the json file.

*** TLDR instructions ***
1) Leave most parameters to default values as shown in Example parameter files, apart from the following ones which are critical to adapt:
	- coro: 1 or 0, depending on whether the observation was made with a coronagraph or not;
	- rec_met: change it, e.g. to "dft_100" only if coro=0, otherwise leave default;
	- "approx_xy_bkg": change it to 0 for your first run.
2) After saving the adapted json file, run the following:
	from vcal.preproc import preproc_IRDIS
	preproc_IRDIS('VCAL_params_preproc_IRDIS.json', 'VCAL_params_calib.json')
3) Check 2_preproc_vip/median_ADI1_*.fits and search for any BKG star (or bright enough companion) present in the field.
4) If any BKG star is present in the field, adapt "approx_xy_bkg" in the preproc parameter file using the xy coordinates you read in the fits file.
5) Regardless of 4), set "to_do" to [4,5,6,7,8,9,10] now
6) Run again step 2). The preprocessing will run until the end now. Check the final cubes. If not satisfy, adapt parameters described below accordingly, and re-run the steps that need so.

*** STRUCTURE OF THE WORKFLOW ***
    #1. crop images to odd size + bad pix correction
    #   a. with provided mask (static) => iterative because clumps
    #   b. sigma filtering (cosmic rays) => non-iterative
    #2. Centering of the star in the images
    #3. Make first master cube + calculate derotation angles
    #4. Anamorphism correction + new master cube writing
    #5. Fine recentering based on bkg star (if relevant)  + new master cube writing
    #6. Bad frame rejection  + new master cube writing
    #   a. Plots before rejection
    #   b. Rejection
    #   c. Plots after rejection
    #7. Final PSF cube writing + calculation of unsaturated flux and FWHM
    #8. Subtraction of satellite spots if 'CENTER' cubes are used as "object" (rare case)
    #9. Writing of final ADI cubes after potential temporal subsampling (i.e. binning) and image cropping
    #10. Calculation of scaling factors to align images (can be useful for DBI post-processing in the next part)


# OBS
coro = 1  # whether the observations were coronagraphic or not
coro_sz = 8  # if coronagraphic, provide radius of the mask in pixels - this area will be discarded to identify bad frames by correlation (check header for size in mas and convert)


# Parts of pipeline to be run/overwritten
to_do = [1,2,3,4,5,6,7,8,9,10] # parts of pre-processing to be run.
overwrite = [1,1,1,1,1,1,1,1,1,1]  # list of bools corresponding to parts of pre-processing to be run again even if files already exist. Same order as to_do
debug = 0 # whether to print more info - useful for debugging
save_space = 0 # whether to progressively delete intermediate products as new products are calculated (can save space but will make you start all over from the beginning in case of bug)
plot = 0                                           # whether to plot additional info (evo of: Strehl, cross-corr level, airmass, flux)
verbose = 1                                        # whether to print more info during processing

# Preprocessing options
rec_met = "satspots"# centering method. choice among {"gauss_2dfit", "moffat_2dfit", "dft_nn", "satspots", "radon", "speckle", "cross_corr_nn"} # either a single string or a list of string to be tested. If not provided will try both gauss_2dfit and dft. Note: "nn" stand for upsampling factor, it should be an integer (recommended: 100)
rec_met_psf = "dft_100"  # centering method for the non-coronagraphic PSF cube. Usually dft_100 is the best
sigfactor = 3. # float corresponding to the SNR threshold used (anything below the threshold is set to 0) before fitting 2D Moffat or Gaussian to find the centroid of either the satellite spots or bkg star.
xy_spots = [[[452,559], [515,559], [451,494], [518,494]],[[452,559], [515,559], [451,494], [518,494]]] # if recentering by satspots provide here the coordinates of the satellite spots. Two possibilities for the format:
a) provide a list of 4 lists (with 2 elements each) (e.g. in CI mode):  top-left, top-right, bottom-left and bottom-right spots xy coordinates in the first channel's raw images. Position in other channel(s) will be inferred from wavelength scaling. Note: do not do that for IRDIS!
b) provide a list of n_ch lists of 4 lists (e.g. n_ch is 2 for DBI): in that case all the coordinates for each channel are provided. CHECK in "_left" and "_right" calibrated cen cubes!
!!! WARNING: these positions can change from one dataset to another, and forgetting to adapt them can lead to a bad centering of the final frames. Examples:
- for CI: "xy_spots": [[105,169], [171,181], [117,103], [183,115]]
- for DBI-H23: "xy_spots": [[[452,559], [515,559], [451,494], [518,494]],[[452,559], [515,559], [451,494], [518,494]]]
- for DBI-K12: "xy_spots": [[[435,568], [524,569], [434,480], [524,479]],[[435,558], [530,558], [434,464], [530,464]]]

badfr_crit_names = ['corr','bkg'] # Bad frame criteria to be used for OBJ cubes; choice between{'stat','ell','corr','bkg','shifts'}. See description below. NOTE: For very good AO correction, it seems the algorithm used in badfrellipticity() routine (i.e. 'ell' option) would sometimes fail to detect the star! Too many rings? Only use for mediocre to very bad Strehl.
badfr_crit_names_psf = ['corr'] # Bad frame criteria to be used for PSF cubes; same description as badfr_crit_names.
# stat: rej based on mean counts in either circle or annulus.
	- "mode": area in which stats are calculated, choice between {'annulus', "circle"}. Default: circle (non-coro), annulus (coro)
	- "rad": radius for the considered area in fwhm. If annulus: correspond to the inner radius of the annulus. Default: 2*fwhm (non-coro), coro_sz+1 (coro).
	- "width": width = [int(4*coro_sz), 0]  # width in fwhm (only used if area is an annulus). Default: 2*fwhm.
	- "thr_top": top sigma threshold; a frame is considered bad if mean pixel intensity in area is larger than median+thr_top*sigma(cfr. description of vip_hci.cube_detect_badfr_pxstats). Default: 1.0
	- "thr_low": lower sigma threshold; a frame is considered bad if mean pixel intensity in area is larger than median+thr_top*sigma(cfr. description of vip_hci.cube_detect_badfr_pxstats). Default: 1.0
# ell: rej based on psf ellipticity
	- "roundhi": cfr. description of vip_hci.preproc.cube_detect_badfr_ellipticity(). Default: 0.2
	- "roundlo": cfr. description of vip_hci.preproc.cube_detect_badfr_ellipticity(). Default: -0.2
	- "crop_sz": in fwhm, cfr. description of vip_hci.preproc.cube_detect_badfr_ellipticity(). Default: 10 (for 10*fwhm crop)
# bkg: rej based on flux of bkg star
	- "thr": min number of sigmas below the median flux of the star for a frame to be considered bad. Default: 3
	NOTE: the approx_xy_bkg should be set to a list of 2 floats for this criterion to be used (see below)
# shifts: rej based on shift amplitude (compared to (x,y) shifts inferred for good CEN image)
	- "thr": min amplitude of shift in pixels for the corresponding frame to be considered bad.
	- "err": nominal uncertainty on true position of the star in coronagraphic observations (cfr. Maire et al. 2016). Default: 0.4 px
# corr: rej based on correlation level with a frame or median frame. Possible dico entries: 
	- "thr": min correlation level with median frame. Notes: supersedes perc if both are provided; use "plot" to check a plot of correlation level for the frames of the cube.
	- "perc": min percentile for bad frames (e.g. if set to 10, the 10% worst frames in the cube will be automatically rejected) . Default: 0
	- "ref": "median" or int (index of ref frame to be used)
	- "crop_sz": in fwhm. Default: 6.
	- "dist": Type of distance/correlation to be used. Cfr. description of vip_hci.preproc.cube_detect_badfr_correlation. Default: "pearson"
	- "mode": {'full', 'annulus'}. Whether to calculate the distance over the full (cropped) image or an annulus.
	- "inradius": [mode='annulus'] the inner radius of the annulus.
	- "width": [mode='annulus'] the width of the annulus.
	NOTE: if using perc, final number of bad frames can be larger than perc if other criteria are provided.

badfr_crit = [{"thr":0.9,"ref":"median"},{"thr":"2"}] # List of dictionaries indicating thresholds & parameters to be used for each bad frame criterion. IMPORTANT: provide a dictionary for each bad frame criterion called in the badfr_crit_names list, define an empty dictionary {} if needed.
badfr_crit_psf = [{"thr":0.9,"ref":"median"},{"thr":"2"}] # Same as above, for PSF.

approx_xy_bkg = 0 # can be 0 or a list of 2 floats: [x,y] coords of background star in the ADI frame obtained after rough centering (named "median_ADI1_<filter>.fits") and optionally (recommended) distortion correction (named "median_ADI2_<filter>_DistCorr.fits"). NOTE: the pipeline should thus FIRST be run up to step #3 or #4, to then be able to set this value if any bkg star present, and then run it again for the subsequent steps. 
snr_thr_bkg = 3. # float corresponding to SNR threshold to select images of the sequence for consideration to compute shifts.
sub_med4bkg = 1  # bool to perform median subtraction before gaussian fit to estimate bkg star position. It is recommended to turn it off (set to 0) if there is a very small delta of rotation (to avoid the star to be self-subtract) 

good_cen_idx = None # None or int. If some CEN cubes are bad (i.e. star not exactly behind coronagraphic mask), this should be the index of a good CEN cube. If not provided, will assume all CEN cubes have the star perfectly behind mask. Will be used for star-BKG radius and differential shifts. Default: None (i.e. not provided in .json file)
mask_scal = [0.15,0]       # mask parameters to find optimal scaling factors. Either: string with full path and filename of a 2D array binary mask, or list of 2 elements: inner and outer radii in arcsec for the binary mask. This binary mask defines where the residuals are minimised after scaling each IFS channel with respect to each other. If both values are set to 0: no mask is used. If the second value is set to 0: just an inner mask will be used.

# preprocessing options
use_cen_only = 0                                  # whether to only reduce CENTER cubes (e.g. if this is meant to be a reference cube for RDI)
idx_test_cube = 0                                            # if rec_met is list: provide index of test cube (should be the most tricky one) where all methods will be tested => best method should correspond min(stddev of shifts)
idx_test_cube_psf = 0                                        # id as above for psf
cen_box_sz = 31                                              # size of the subimage for 2d fit, , for OBJ, PSF and CEN
true_ncen = 2                                                # number of points in time to use for interpolation of center location in OBJ cubes based on location inferred in CEN cubes. Min value: 2 (set to 2 even if only 1 CEN cube available). Important: this is not necessarily equal to the number of CEN cubes (e.g. if there are 3 CEN cubes, 2 before the OBJ sequence and 1 after, true_ncen should be set to 2, not 3)
imlib = 'vip-fft'                                            # {'vip-fft', 'opencv'} Image library used in VIP for image shifts.
interpolation = 'lanczos4'                                   # Interpolation method used for image shifts. If imlib is 'vip-fft', this is ignored. 
template_strehl = ["science_dbi_{}{:.0f}","psf_dbi_{}{:.0f}"]
distort_corr = 1                                             # whether to correct for distortion (anamorphism) or not (following scal_x_distort and scal_y_distort)
final_crop_sz = 361                                          # int or list (if list, cubes of different dims will be saved). NOTE: only last odd dim will be saved using final_cubename . 823 # 361 => 2.25'' radius; but better to keep it as large as possible and only crop before post-processing. Here we just cut the useless edges (100px on each side)

bp_crop_sz = 501                                             # int; size for the crop of input cubes before bad pixel correction and centering (slow for large images, but careful if star in input images is not close to center)
bp_crop_sz_psf = 501                                         # int; same as above for psf images
final_crop_sz_psf = 41                                       # int or list (if list, cubes of different dims will be saved). NOTE: only last odd dim will be saved using final_psfname. 51 => 0.25'' radius (~3.5 FWHM)
psf_model = 'gauss'                                          #model to be used to measure FWHM and flux, and for bkg star centroid fit (for fine recentering), if requested. Choice between {'gauss', 'moff', 'airy'}
bin_fit = 1                               # binning factor for consecutive images of the cube, only used for bkg star centroid fitting (useful if bkg star is faint)
convolve_bkg = 1                          # whether to convolve the image by a gaussian before bkg star centroid fitting (useful if bkg star is faint)

separate_trim = 0    # whether to separately trim bad frames in the individual cubes for each filter (sometimes there are individual discrepancies).  If False, will only trim based on the first channel. If a string, it should correspond to the channel to be used.

# output names - optional. NOTE: the files below are only written if at least one odd crop size is provided (i.e. VIP convention). Post-processing will not work optimally otherwise.
final_cubename = "final_cube"
final_anglename = "final_derot_angles.fits"
final_psfname = "final_psf"
final_fluxname = "final_flux"
final_scalefacname = "final_scale_fac.fits",